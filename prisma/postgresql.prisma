generator clent {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "darwin"]
}

generator prismaClassGenerator {
  provider = "node -r ts-node/register/transpile-only src/index.ts"
  output   = "../src/_gen/prisma-class"
  dryRun   = "false"
  // separateRelationFields = "true"
}

// generator prismaClassGenerator {
//   provider = "prisma-class-generator"
//   useSwagger = true
//   dryRun = false
//   // separateRelationFields= true
//   output   = "../src/@generated"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Field {
  pk              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  description     String?
  imageUrl        String?
  ProfessionField ProfessionField[]
}

model Profession {
  pk              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  description     String?
  imageUrl        String
  ProfessionField ProfessionField[]
}

model Target {
  pk                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  description           String?
  imageUrl              String?
  professionFieldTarget ProfessionFieldTarget[]
}

model ProfessionField {
  pk            String     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  professionId  String     @db.Uuid
  displayName   String
  description   String?
  imageUrl      String?
  hiredCounter  Int?       @default(0)
  avgHourlyRate Float?     @default(0)
  fieldId       String     @db.Uuid
  field         Field      @relation(fields: [fieldId], references: [pk])
  profession    Profession @relation(fields: [professionId], references: [pk])

  professionFieldTarget ProfessionFieldTarget[]
  gig                   Gig[]
  gigQuestion           GigQuestion[]
}

model ProfessionFieldTarget {
  pk       String  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  targetId String  @db.Uuid
  imageUrl String?
  // gig      Gig[]
  target   Target  @relation(fields: [targetId], references: [pk])

  professionField   ProfessionField @relation(fields: [professionFieldId], references: [pk])
  professionFieldId String          @db.Uuid

  @@id([professionFieldId, targetId])
}

model Country {
  id          Int        @id @default(autoincrement())
  name        String
  utfName     String
  alpha2Code  String
  alpha3Code  String
  numericCode String
  callingCode String
  provinces   Province[]
}

model Province {
  id        Int     @id @default(autoincrement())
  name      String
  code      String?
  countryId Int
  cities    City[]
  country   Country @relation(fields: [countryId], references: [id])
}

model City {
  id           Int            @id @default(autoincrement())
  name         String
  code         String?
  provinceId   Int
  address      Address[]
  province     Province       @relation(fields: [provinceId], references: [id])
  gigsOnCities GigsOnCities[]
}

model Address {
  pk               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customName       String
  details          String?
  googlePlaceId    String?
  latitude         String?
  longitude        String?
  streetNumber     String?
  formattedAddress String?
  locality         String?
  sublocality      String?
  area             String?
  country          String?
  postalCode       String?
  apartment        String?
  reference        String?
  default          Boolean
  cityId           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  cities           City     @relation(fields: [cityId], references: [id])
  user             User?
}

model User {
  pk             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName      String
  secondName     String?
  firstLastName  String
  secondLastName String?
  email          String
  phoneNumber    String
  username       String?
  addressId      String    @unique @db.Uuid
  customer       Customer?
  provider       Provider?
  address        Address   @relation(fields: [addressId], references: [pk])
}

model Customer {
  pk          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  verified    Boolean @default(false)
  banned      Boolean @default(false)
  ratingCount Int
  ratingSum   Int
  imageUrl    String
  userId      String  @unique @db.Uuid
  user        User    @relation(fields: [userId], references: [pk])
}

model Provider {
  pk          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  verified    Boolean @default(false)
  banned      Boolean @default(false)
  ratingCount Int
  ratingSum   Int
  imageUrl    String
  slogan      String
  description String
  userId      String  @unique @db.Uuid
  gig         Gig[]
  user        User    @relation(fields: [userId], references: [pk])
}

model Gig {
  pk          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  imageUrl    String
  ratingSum   Int
  ratingCount Int
  archived    Boolean

  professionField   ProfessionField @relation(fields: [professionFieldId], references: [pk])
  professionFieldId String          @db.Uuid
  providerId        String          @db.Uuid
  // professionFieldTargetId String                @db.Uuid
  // professionFieldTarget   ProfessionFieldTarget @relation(fields: [professionFieldTargetId], references: [pk])
  provider          Provider        @relation(fields: [providerId], references: [pk])
  gigsOnCities      GigsOnCities[]

  @@unique([providerId, professionFieldId])
}

model GigsOnCities {
  gigId  String @db.Uuid
  cityId Int
  city   City   @relation(fields: [cityId], references: [id])
  gig    Gig    @relation(fields: [gigId], references: [pk])

  @@id([gigId, cityId])
}

enum GigQuestionType {
  SELECT
  TEXT
  CHECKBOX
}

model GigQuestion {
  pk                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text              String
  type              GigQuestionType
  order             Int
  gigQuestionOption GigQuestionOption[]
  professionField   ProfessionField     @relation(fields: [professionFieldId], references: [pk])
  professionFieldId String              @db.Uuid
}

model GigQuestionOption {
  pk            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  option        String
  gigQuestion   GigQuestion @relation(fields: [gigQuestionId], references: [pk])
  gigQuestionId String      @db.Uuid
}
